// Mixins

@mixin ellipsis {
  -ms-text-overflow: ellipsis;
  text-overflow: ellipsis;
  overflow: hidden;
}

/**
 * If this is used in conjunction with a media object,
 * it will cause problems so, in order to prevent that
 * it needs to be added to the element of media-body
 * this: display: grid
 */
@mixin noWrapWithEllipsis {
  white-space: nowrap;
  @include ellipsis;
}

/**
 * Add it to the parent element and the
 * child div element will be aligned to the bottom
 */
@mixin alignContentBottom {
  position: relative;

  & > div {
    position: absolute;
    bottom: 0;
  }
}

/**
 * Adds a text-decoration based on the type and value
 *
 * $value: 'hover', 'none' or empty
 * $type: All the values for text decoration
 */
@mixin textDecoration($value, $type: 'none') {
  @if $type == 'hover' {
    &:hover,
    &:focus,
    &:active {
      text-decoration: unquote($value) !important;
    }
  } @else if $type == 'none' {
    text-decoration: unquote($value) !important;
  }
}

/**
 * Justifies the text in the current element
 */
@mixin textJustify() {
  text-align: justify;

  -ms-text-justify: inter-word;
  text-justify: inter-word;
}

/**
 * Creates custom font signs for the current element
 * Have to be supplied with a content
 */
@mixin fontCustom() {
  &::before {
    display: inline-flex;
    width: 32px;
    height: 32px;
    font-size: $size-rem-32;
    align-items: center;
    justify-content: center;
    flex-direction: row;
    font-style: normal;
    font-weight: $font-weight-default-300;
    position: relative;
    top: -1px;
    left: -.3px;
  }
}

/*
 * Creates the css for the sticky sidebar
 */
@mixin sidebarStickySocialInfo() {
  position: absolute;
  top: calc(900px - #{$size-rem-48});
  left: 50%;
  width: 200px;
  height: 500px;
  margin-left: -580px;

  & > div {
    position: sticky;
    top: 0;
    left: 0;
  }
}

/**
 * Hover effects
 *
 * Effect names:
 * - Rotate
 */
@mixin hoverEffect() {
  .hover-effect {

  }
}

@mixin hoverEffectRotate($deg)
{
  i {
    &::before {
      -webkit-transition: transform .6s;
      -moz-transition: transform .6s;
      -ms-transition: transform .6s;
      -o-transition: transform .6s;
      transition: transform .6s;

      -webkit-transform: rotate(0deg);
      -moz-transform: rotate(0deg);
      -ms-transform: rotate(0deg);
      -o-transform: rotate(0deg);
      transform: rotate(0deg);
    }
  }

  &:hover {
    i {
      &::before {
        -webkit-transform: rotate(#{$deg}deg);
        -moz-transform: rotate(#{$deg}deg);
        -ms-transform: rotate(#{$deg}deg);
        -o-transform: rotate(#{$deg}deg);
        transform: rotate(#{$deg}deg);
      }
    }
  }
}

/**
 * Hover effects - images
 *
 * Effect names:
 * - Reflection
 */
@mixin hoverEffectImg() {
  .hover-effect-img {
    position: relative;
    overflow: hidden;
    background-color: $color-main-blue;

    &:hover a {
      opacity: .6;

      -webkit-transform: scale3d(1, 1, 1);
      -moz-transform: scale3d(1, 1, 1);
      -ms-transform: scale3d(1, 1, 1);
      -o-transform: scale3d(1, 1, 1);
      transform: scale3d(1, 1, 1);

      &::after {
        -webkit-transform: scale3d(2.1, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);
        -moz-transform: scale3d(2.1, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);
        -ms-transform: scale3d(2.1, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);
        -o-transform: scale3d(2.1, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);
        transform: scale3d(2.1, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);
      }
    }
  }
}

@mixin hoverEffectImgReflection() {
  a {
    position: relative;
    min-height: 100%;
    max-width: 100%;
    opacity: 1;

    -webkit-transition: opacity .35s, transform .35s;
    -moz-transition: opacity .35s, transform .35s;
    -ms-transition: opacity .35s, transform .35s;
    -o-transition: opacity .35s, transform .35s;
    transition: opacity .35s, transform .35s;

    -webkit-transform: scale3d(1.05, 1.05, 1);
    -moz-transform: scale3d(1.05, 1.05, 1);
    -ms-transform: scale3d(1.05, 1.05, 1);
    -o-transform: scale3d(1.05, 1.05, 1);
    transform: scale3d(1.05, 1.05, 1);

    &::after {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, .5);
      content: '';

      -webkit-transition: transform .6s;
      -moz-transition: transform .6s;
      -ms-transition: transform .6s;
      -o-transition: transform .6s;
      transition: transform .6s;

      -webkit-transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);
      -moz-transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);
      -ms-transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);
      -o-transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);
      transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);
    }
  }
}

/**
 * Box shadows
 */
@mixin boxShadow($offset-x, $offset-y, $blur-radius, $spread-radius, $color) {
  -webkit-box-shadow: #{$offset-x}px #{$offset-y}px #{$blur-radius}px #{$spread-radius}px $color;
  -moz-box-shadow: #{$offset-x}px #{$offset-y}px #{$blur-radius}px #{$spread-radius}px $color;
  box-shadow: #{$offset-x}px #{$offset-y}px #{$blur-radius}px #{$spread-radius}px $color;
}

@mixin boxShadowMultiple($value) {
  -webkit-box-shadow: #{$value};
  -moz-box-shadow: #{$value};
  box-shadow: #{$value};
}

/**
 * Transforms
 */
@mixin transform($value) {
  -webkit-transform: #{$value};
  -moz-transform: #{$value};
  -ms-transform: #{$value};
  -o-transform: #{$value};
  transform: #{$value};
}

/**
 * Border radius
 */
@mixin borderRadius($value) {
  -webkit-border-radius: #{$value};
  -moz-border-radius: #{$value};
  border-radius: #{$value};
}

/**
 * Creates flex
 */
@mixin flex($number) {
  -webkit-box-flex: #{$number};
  -webkit-flex: #{$number} #{$number} auto;
  -ms-flex: #{$number} #{$number} auto;
  flex: #{$number} #{$number} auto;
}

/**
 * Creates transition
 */
@mixin transition-custom($property, $duration, $timing-function, $delay) {
  $transition: unquote($property) $duration unquote($timing-function);

  @if $delay != 'null' {
    $transition: $transition $delay;
  }

  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}
